<%- include("./boilerplate-links.ejs") %>
<body>
  <%- include("../../utils/error-handler/flash_messages.ejs") %>
  <div class="layout">
    <input
      type="checkbox"
      name="sidebar-toggle"
      id="sidebar-toggle"
      style="display: none"
    />
    <%- include("./theme-changer.ejs") %>
    <div class="main-sidebar"><%- include("./sidebar.ejs") %></div>

    <div class="body_container">
      <!-- Navbar content -->
      <%- include("./navbar.ejs") %>
      <!-- Body content -->
      <%- body %>
    </div>
    <!-- Footer content -->
    <%- include("./footer.ejs") %> <%- include("./no-data.ejs") %>
  </div>

  <script
    src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"
  ></script>
  <script>
    const imgInput = document.querySelector(".brand-img-input");
    // Convert any color (HEX, RGB, HSL, Named) to HEX
    function toHex(color) {
      let tempElement = document.createElement("div");
      tempElement.style.color = color;
      document.body.appendChild(tempElement);

      let computedColor = getComputedStyle(tempElement).color;
      document.body.removeChild(tempElement);

      let rgbMatch = computedColor.match(/\d+/g);
      if (rgbMatch && rgbMatch.length === 3) {
        return `#${rgbMatch
          .map((x) => Number(x).toString(16).padStart(2, "0"))
          .join("")}`;
      }
      return null; // Return null if conversion fails
    }

    // Convert any color to RGB
    function toRgb(color) {
      let tempElement = document.createElement("div");
      tempElement.style.color = color;
      document.body.appendChild(tempElement);

      let computedColor = getComputedStyle(tempElement).color;
      document.body.removeChild(tempElement);

      return computedColor; // Returns `rgb(r, g, b)`
    }

    // Function to update CSS variables & keep inputs in sync
    function updateColor(variable, value) {
      let hexValue = toHex(value);
      let rgbValue = toRgb(value);

      if (hexValue) {
        document.documentElement.style.setProperty(
          `--color-${variable}`,
          hexValue
        );
        document.documentElement.style.setProperty(
          `--color-${variable}-rgb`,
          rgbValue.match(/\d+, \d+, \d+/)[0]
        );

        // Update only the related inputs
        document.querySelector(
          `.theme-input-color[data-var="${variable}"]`
        ).value = hexValue;
        document.querySelector(
          `.theme-input-text[data-var="${variable}"]`
        ).value = value;
      }
    }

    // Event listeners for color pickers
    document.querySelectorAll(".theme-input-color").forEach((input) => {
      input.addEventListener("input", function () {
        updateColor(this.dataset.var, this.value);
      });
    });

    // Event listeners for text inputs (HEX, RGB, HSL, Named)
    document.querySelectorAll(".theme-input-text").forEach((input) => {
      input.addEventListener("input", function () {
        let colorValue = this.value.trim();
        if (colorValue) {
          updateColor(this.dataset.var, colorValue);
        }
      });
    });

    imgInput.addEventListener("input", function () {
      let imgUrl = this.value.trim();
      let imgElement = document.querySelector(".brand-logo");
      let errorMessage = document.querySelector(".error-message");

      if (!imgUrl) {
        errorMessage.style.display = "none"; // Hide error message if input is empty
        return;
      }

      let tempImage = new Image();
      tempImage.src = imgUrl;

      tempImage.onload = function () {
        imgElement.src = imgUrl; // Valid image, update src
        errorMessage.style.display = "none"; // Hide error message
      };

      tempImage.onerror = function () {
        errorMessage.style.display = "block"; // Show error message if invalid
      };
    });
  </script>
</body>
